<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Programming</title>
    <link>http://prtamil.github.io/posts/</link>
    <description>Recent content in Posts on Programming</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 19 Nov 2016 12:46:45 +1230</lastBuildDate>
    
        <atom:link href="http://prtamil.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Slime Connect to MultipleLisps</title>
      <link>http://prtamil.github.io/posts/slime/</link>
      <pubDate>Sat, 19 Nov 2016 12:46:45 +1230</pubDate>
      
      <guid>http://prtamil.github.io/posts/slime/</guid>
      <description>

&lt;p&gt;When you are using slime to connect emacs the default &amp;rsquo;M-x slime&amp;rsquo; will connect to local
instance of CommonLisp. But If you want to connect to Lisps in different machine you can
use slime feature called&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;M-x slime-connect&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Inorder to do that we need start CommonLisp server.&lt;/p&gt;

&lt;h2 id=&#34;swank-server&#34;&gt;Swank Server&lt;/h2&gt;

&lt;p&gt;You can start another local instance or start swank server on different machine.&lt;/p&gt;

&lt;h3 id=&#34;starting-local-instance-of-lisp&#34;&gt;Starting Local Instance of Lisp&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;    (ql:quickload &amp;quot;swank&amp;quot;)
    (swank:create-server :port 4005)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;starting-remote-instance-via-ssh&#34;&gt;Starting Remote Instance via SSH&lt;/h3&gt;

&lt;p&gt;In order to start Lisp instance on remote machine we need to set &amp;lsquo;&lt;em&gt;loopback-interface&lt;/em&gt;&amp;rsquo; to remote-ip address.&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;    (ql:quickload &amp;quot;swank&amp;quot;)
    (setf swank::*loopback-interface* &amp;quot;192.168.0.5&amp;quot;)
    (swank:create-server :port 4005)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;connecting-to-different-lisp&#34;&gt;Connecting to Different Lisp&lt;/h2&gt;

&lt;p&gt;So inorder to connect to different lisp just use&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;    M-x slime-connect
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;It will ask for IP and port.&lt;/p&gt;

&lt;p&gt;Connect and Enjoy&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Javascript Canvas Bouncing Balls</title>
      <link>http://prtamil.github.io/posts/javscript-canvas/</link>
      <pubDate>Sat, 19 Nov 2016 12:46:43 +1230</pubDate>
      
      <guid>http://prtamil.github.io/posts/javscript-canvas/</guid>
      <description>

&lt;h3 id=&#34;javascript-canvas-tutorial&#34;&gt;Javascript Canvas tutorial&lt;/h3&gt;

&lt;p&gt;This is my first javascript canvas demo. We will discuss about how to building it.&lt;/p&gt;

&lt;p&gt;&lt;div&gt;
     &lt;canvas width=&#34;300px&#34; height=&#34;200px&#34; style=&#34;display:none&#34; id=&#39;a&#39;&gt; no canvas &lt;/canvas&gt;
     &lt;button onclick=&#34;clicker()&#34;&gt;Toggle Demo&lt;/button&gt;
&lt;/div&gt;
&lt;script src=&#34;../assets/demos/bounce/vector.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;../assets/demos/bounce/mover.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;../assets/demos/bounce/bounce.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h4 id=&#34;lets-start-with-simple-vector-class&#34;&gt;Lets start with Simple Vector Class&lt;/h4&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function Vector(x,y){
    this.x = x || 0;
    this.y = y || 0;
}

//Add another vector
Vector.prototype.add = function(vector) {
    this.x += vector.x;
    this.y += vector.y;
}

//multiply with scalar
Vector.prototype.multiplyScalar = function(scalar){
    this.x *= scalar;
    this.y *= scalar;
}
//Get Length of vector
Vector.prototype.getMagnitude = function() {
    return Math.sqrt(this.x * this.x + this. y * this.y);
}

//Get the angle accounting for the quadrant we are in
Vector.prototype.getAngle = function(){
    return Math.atan2(this.y, this.x);
}

//Allows us to get a new vector from angle magnitude
Vector.fromAngle = function(angle, magnitude) {
    return new Vector(magnitude* Math.cos(angle),
                      magnitude* Math.sin(angle));
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;Vector class adds methods such as&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;add()&lt;/li&gt;
&lt;li&gt;multiplyScalar()&lt;/li&gt;
&lt;li&gt;getMagnitude()&lt;/li&gt;
&lt;li&gt;getAngle   ()
&amp;gt;  Gets Angle from current position&lt;/li&gt;
&lt;li&gt;fromAngle
&amp;gt;  Gets Current Posistion vector from Angle and Magnitude&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;movers-class&#34;&gt;Movers Class&lt;/h4&gt;

&lt;p&gt;Movers are objects. I called it as movers. You can rename it as objects.
 The main purpose of it is to handle objects movement.
 Each movers has&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Velocity&lt;/li&gt;
&lt;li&gt;Location&lt;/li&gt;
&lt;li&gt;Direction&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And we can defince current movement as&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Position = Location + Velocity&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since this is Bouncing balls once it reaches the boundry we can switch direction&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;
function Mover(x,y) {
    this.location = new Vector(x,y);
    this.velocity = new Vector(1,1);
    this.direction = 1;
}

Mover.prototype.update = function(){
    this.location.add(this.velocity);
    
}

Mover.prototype.checkBounds = function(){
    if(this.location.x &amp;lt; 0 || this.location.x &amp;gt; window.innerWidth)
        this.velocity.x *= -this.direction;
    if(this.location.y &amp;lt; 0 || this.location.y &amp;gt; window.innerHeight)
        this.velocity.y *= -this.direction;
}
Mover.prototype.draw = function(ctx){
    ctx.beginPath();
    ctx.arc(this.location.x, this.location.y,20,0,2*Math.PI);
    ctx.fillStyle = &amp;quot;#0f0&amp;quot;;
    ctx.fill();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;drawing-part&#34;&gt;Drawing Part.&lt;/h4&gt;

&lt;p&gt;Now the drawing part. we use&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;requestAnimationFrame
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;function to Draw the sequences on each and every frame.
We define a Animation Loop with following logic&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;clear();&lt;/li&gt;
&lt;li&gt;update();&lt;/li&gt;
&lt;li&gt;draw();&lt;/li&gt;
&lt;li&gt;queue();&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;

window.onload = function () {
    var canvas = document.querySelector(&#39;canvas&#39;);
    var ctx = canvas.getContext(&#39;2d&#39;);

    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
    

    
    var movers = [];
    var moverCount = 10;
    
    for(var i = 0; i &amp;lt; moverCount; i++){
        var m = new Mover(Math.random()*100, Math.random()*100);
        m.velocity = new Vector(Math.random()*15, Math.random()*15);
        movers.push(m);
    }
    
    function loop() {
        clear();
        update();
        draw();
        queue();
    }

    function clear() {
        ctx.fillStyle = &amp;quot;#000&amp;quot;;
        ctx.fillRect(0, 0, canvas.width, canvas.height);
    }

    function update() {
        movers.map(function(m){
            m.update();
            m.checkBounds();
        });
    }
    

    function draw() {
       movers.map(function(m){
           m.draw(ctx);
       });
    }

    function queue() {
        window.requestAnimationFrame(loop);
    }
    
    loop();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So this defines the basic Javascript Canvas Demo&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>